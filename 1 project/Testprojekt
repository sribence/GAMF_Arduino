Nagyszer≈± projekt√∂tlet, √©s pont ide√°lis egy sz√©p GitHub `README.md` alap√∫ dokument√°ci√≥hoz! Az al√°bbi p√©lda egy teljes GitHub-dokument√°ci√≥s oldalra k√©sz√ºlt, **Markdown form√°z√°ssal**, **k√≥dr√©szletekkel**, **magyar kommentekkel**, **inf√≥ blokkokkal**, **checkboxos ToDo list√°val**, **k√©pek hely√©vel**, stb.

---

```markdown
# üö¶ LED-ek, Csipog√≥ √©s RGB vez√©rl√©s ‚Äì Arduino Projekt

Ez a projekt egy **k√∂zleked√©si l√°mpa szimul√°ci√≥t** val√≥s√≠t meg, ahol a piros-s√°rga-z√∂ld LED-ek v√°ltogat√°sa mellett **csipog√≥** √©s **RGB LED** is r√©szt vesz a folyamatban. A v√©g√©n 3 potm√©terrel keverhet≈ë RGB sz√≠nt jelen√≠t√ºnk meg, √©s opcion√°lisan kombin√°lhatjuk a hanggal is ‚Äì "hangos l√°mpa" m√≥d.

---

## ‚úÖ Tartalomjegyz√©k

- [Alkatr√©szek](#alkatr√©szek)
- [Kapcsol√°si rajz](#kapcsol√°si-rajz)
- [L√©p√©sek](#l√©p√©sek)
- [K√≥d √©s magyar√°zat](#k√≥d-√©s-magyar√°zat)
- [K√©pek](#k√©pek)
- [Fejleszt√©si √∂tletek](#fejleszt√©si-√∂tletek)

---

## üß∞ Alkatr√©szek

| Eszk√∂z            | Darabsz√°m |
|-------------------|-----------|
| Piros LED         | 1         |
| S√°rga LED         | 1         |
| Z√∂ld LED          | 1         |
| RGB LED           | 1         |
| 220 Ohm ellen√°ll√°s| 3‚Äì4       |
| Csipog√≥ (Buzzer)  | 1         |
| Potm√©ter          | 3         |
| Arduino UNO       | 1         |
| Breadboard + Jumperek | -     |

---

## üß† Kapcsol√°si rajz

üì∑ *(Helyezd ide az √°br√°t)*  
```

images/traffic\_lamp\_wiring.png

````

> _Figure 1: A LED-ek, buzzer √©s RGB bek√∂t√©se_

---

## üîß L√©p√©sek

1. **Alap k√∂zleked√©si l√°mpa villogtat√°s** (piros‚Äìs√°rga‚Äìz√∂ld)
2. **Csipog√≥ integr√°l√°sa** (id≈ëz√≠t√©s, visszasz√°ml√°l√°s hangjelz√©ssel)
3. **RGB LED alapsz√≠nek villogtat√°sa**
4. **RGB LED sz√≠nkever√©s potm√©terekkel**
5. *(Extra)* Hangos l√°mpa m√≥d: RGB + buzzer

---

## üíª K√≥d √©s magyar√°zat

### 1. Alap LED szimul√°ci√≥ ‚Äì k√∂zleked√©si l√°mpa

```cpp
// LED l√°bak
int piros = 2;
int sarga = 3;
int zold  = 4;

void setup() {
  pinMode(piros, OUTPUT);
  pinMode(sarga, OUTPUT);
  pinMode(zold, OUTPUT);
}

void loop() {
  digitalWrite(piros, HIGH);
  delay(3000);                    // piros 3 m√°sodperc
  digitalWrite(sarga, HIGH);
  delay(1000);                    // s√°rga + piros egy√ºtt 1 m√°sodperc
  digitalWrite(piros, LOW);
  digitalWrite(sarga, LOW);
  digitalWrite(zold, HIGH);
  delay(3000);                    // z√∂ld 3 m√°sodperc
  digitalWrite(zold, LOW);
  digitalWrite(sarga, HIGH);
  delay(1000);                    // s√°rga 1 m√°sodperc
  digitalWrite(sarga, LOW);
}
````

‚ÑπÔ∏è **Inf√≥**: A `delay()` funkci√≥val id≈ëz√≠thetj√ºk az egyes sz√≠nek v√°lt√°s√°t. A s√°rga LED jelzi az √°tmenetet.

---

### 2. Csipog√≥ hozz√°ad√°sa (pl. v√©szjelz√©s)

```cpp
int buzzer = 5;

void loop() {
  tone(buzzer, 1000);   // 1000 Hz hang
  delay(200);  
  noTone(buzzer);
  delay(200);
}
```

‚ÑπÔ∏è **Inf√≥**: A `tone()` f√ºggv√©ny gener√°l hangot. A `noTone()` le√°ll√≠tja. Pr√≥b√°lj ki k√ºl√∂nb√∂z≈ë frekvenci√°kat √©s √ºtemeket!

---

### 3. RGB LED alapvez√©rl√©s (piros-z√∂ld-k√©k egym√°s ut√°n)

```cpp
int red = 6;
int green = 9;
int blue = 10;

void setup() {
  pinMode(red, OUTPUT);
  pinMode(green, OUTPUT);
  pinMode(blue, OUTPUT);
}

void loop() {
  // Piros
  analogWrite(red, 255);
  analogWrite(green, 0);
  analogWrite(blue, 0);
  delay(1000);
  
  // Z√∂ld
  analogWrite(red, 0);
  analogWrite(green, 255);
  analogWrite(blue, 0);
  delay(1000);

  // K√©k
  analogWrite(red, 0);
  analogWrite(green, 0);
  analogWrite(blue, 255);
  delay(1000);
}
```

‚ÑπÔ∏è **Inf√≥**: Az `analogWrite()` seg√≠ts√©g√©vel PWM kimenettel √°ll√≠thatjuk a f√©nyer≈ët 0‚Äì255 k√∂z√∂tt.

---

### 4. Potm√©teres sz√≠nkever√©s

```cpp
int potR = A0;
int potG = A1;
int potB = A2;

void loop() {
  int r = map(analogRead(potR), 0, 1023, 0, 255);
  int g = map(analogRead(potG), 0, 1023, 0, 255);
  int b = map(analogRead(potB), 0, 1023, 0, 255);

  analogWrite(red, r);
  analogWrite(green, g);
  analogWrite(blue, b);
  delay(10);
}
```

‚ÑπÔ∏è **Inf√≥**: A `map()` f√ºggv√©nnyel az anal√≥g bemenetet (0‚Äì1023) konvert√°ljuk 0‚Äì255 tartom√°nyra az RGB LED-hez.

---

### 5. üîä Hangos l√°mpa m√≥d

```cpp
void loop() {
  // RGB random sz√≠n + hang kombin√°ci√≥
  int r = random(255);
  int g = random(255);
  int b = random(255);

  analogWrite(red, r);
  analogWrite(green, g);
  analogWrite(blue, b);
  
  tone(buzzer, 500 + r); // a piros √©rt√©k befoly√°solja a hangot
  delay(500);
  noTone(buzzer);
}
```

---

## üì∑ K√©pek

Helyezd el a k√∂vetkez≈ë f√°jlokat a `images/` mapp√°ba:

* `traffic_lamp_wiring.png`
* `rgb_control_diagram.png`
* `full_project_build.jpg`

Markdownban √≠gy hivatkozol r√°:

```markdown
![Kapcsol√°si rajz](images/traffic_lamp_wiring.png)
```

---

## üìå Fejleszt√©si √∂tletek

* [ ] OLED kijelz≈ë integr√°l√°sa (pl. sz√≠n√©rt√©kek megjelen√≠t√©se)
* [ ] Nyom√≥gombos v√°lt√°s "k√©zi vez√©rl√©s" m√≥ddal
* [ ] RGB LED villogtat√°s ritmus alapj√°n
* [ ] Id≈ëalap√∫ m≈±k√∂d√©s (millis() alap√∫, nem delay)

---

## üìé Licenc

MIT License

---

## üì© Kapcsolat

Ha k√©rd√©sed van vagy hib√°t tal√°lsz, nyiss egy `Issue`-t vagy k√ºldj `Pull Request`-et. üòä

```

---

Ez a `README.md` √≠gy n√©zne ki egy GitHub projektben, teljes m√©rt√©kben nyomtathat√≥ √©s k√∂nnyen PDF-be export√°lhat√≥.  
Ha szeretn√©d, √°tkonvert√°lom neked `.pdf` vagy `.html` form√°tumba is ‚Äì csak sz√≥lj!
```
