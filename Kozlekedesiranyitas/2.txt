const int PAIR_ONE_GREEN = 8;
const int PAIR_ONE_YELLOW = 9;
const int PAIR_ONE_RED = 10;
const int PAIR_TWO_GREEN = 11;
const int PAIR_TWO_YELLOW = 12;
const int PAIR_TWO_RED = 13;

const unsigned long GO_PERIOD = 5000;    // 5 másodperc zöld állapot
const unsigned long WAIT_PERIOD = 2000;  // 2 másodperc sárga/piros-sárga

enum StateMachine {
    PAIR_ONE_GO,
    PAIR_TWO_GO,
    PAIR_ONE_WAIT,
    PAIR_TWO_WAIT,
};

unsigned long TimeCheckpoint;
StateMachine CurrentState = PAIR_ONE_GO;

void setup()
{
    pinMode(PAIR_ONE_GREEN, OUTPUT);
    pinMode(PAIR_ONE_YELLOW, OUTPUT);
    pinMode(PAIR_ONE_RED, OUTPUT);

    pinMode(PAIR_TWO_GREEN, OUTPUT);
    pinMode(PAIR_TWO_YELLOW, OUTPUT);
    pinMode(PAIR_TWO_RED, OUTPUT);
    
    Serial.begin(9600);
    TimeCheckpoint = millis();
}

void loop()
{
    switch (CurrentState)
    {
        case PAIR_ONE_GO:
            PairOneGo();
            break;
        case PAIR_TWO_GO:
            PairTwoGo();
            break;
        case PAIR_ONE_WAIT:
            PairOneWait();
            break;
        case PAIR_TWO_WAIT:
            PairTwoWait();
            break;
    }
}

void PairOneGo()
{
    ManagePairOne("green");
    ManagePairTwo("red");

    if (millis() - TimeCheckpoint >= GO_PERIOD)
    {
        TimeCheckpoint = millis();
        CurrentState = PAIR_TWO_WAIT;
    }
}

void PairTwoGo()
{
    ManagePairOne("red");
    ManagePairTwo("green");

    if (millis() - TimeCheckpoint >= GO_PERIOD)
    {
        TimeCheckpoint = millis();
        CurrentState = PAIR_ONE_WAIT;
    }
}

void PairOneWait()
{
    ManagePairOne("red-yellow");
    ManagePairTwo("yellow");

    if (millis() - TimeCheckpoint >= WAIT_PERIOD)
    {
        TimeCheckpoint = millis();
        CurrentState = PAIR_ONE_GO;
    }
}

void PairTwoWait()
{
    ManagePairOne("yellow");
    ManagePairTwo("red-yellow");

    if (millis() - TimeCheckpoint >= WAIT_PERIOD)
    {
        TimeCheckpoint = millis();
        CurrentState = PAIR_TWO_GO;
    }
}

// Lámpavezérlő függvények
void ManagePairOne(String state)
{
    if (state == "green") {
        digitalWrite(PAIR_ONE_GREEN, HIGH);
        digitalWrite(PAIR_ONE_YELLOW, LOW);
        digitalWrite(PAIR_ONE_RED, LOW);
    } else if (state == "yellow") {
        digitalWrite(PAIR_ONE_GREEN, LOW);
        digitalWrite(PAIR_ONE_YELLOW, HIGH);
        digitalWrite(PAIR_ONE_RED, LOW);
    } else if (state == "red") {
        digitalWrite(PAIR_ONE_GREEN, LOW);
        digitalWrite(PAIR_ONE_YELLOW, LOW);
        digitalWrite(PAIR_ONE_RED, HIGH);
    } else if (state == "red-yellow") {
        digitalWrite(PAIR_ONE_GREEN, LOW);
        digitalWrite(PAIR_ONE_YELLOW, HIGH);
        digitalWrite(PAIR_ONE_RED, HIGH);
    }
}

void ManagePairTwo(String state)
{
    if (state == "green") {
        digitalWrite(PAIR_TWO_GREEN, HIGH);
        digitalWrite(PAIR_TWO_YELLOW, LOW);
        digitalWrite(PAIR_TWO_RED, LOW);
    } else if (state == "yellow") {
        digitalWrite(PAIR_TWO_GREEN, LOW);
        digitalWrite(PAIR_TWO_YELLOW, HIGH);
        digitalWrite(PAIR_TWO_RED, LOW);
    } else if (state == "red") {
        digitalWrite(PAIR_TWO_GREEN, LOW);
        digitalWrite(PAIR_TWO_YELLOW, LOW);
        digitalWrite(PAIR_TWO_RED, HIGH);
    } else if (state == "red-yellow") {
        digitalWrite(PAIR_TWO_GREEN, LOW);
        digitalWrite(PAIR_TWO_YELLOW, HIGH);
        digitalWrite(PAIR_TWO_RED, HIGH);
    }
}
