const int MOTION_SENSOR = 8;
const int LED_R = 12;
const int LED_G = 10;
const int LED_B = 11;
const float BRIGHTNESS = 0.1;

// State machine enum
enum StateMachine {
    UNARMED,
    ARMED,
    ALARMED,
};

bool IsMovementDetected = false;
StateMachine CurrentState = ARMED;
int currentColor = 0;
unsigned long currentMillis = millis();
unsigned long previousMillis = 0;
const long colorChangeInterval = 500; // színváltás ideje ms

// This function runs once after the Arduino is turned on
void setup()
{
    Serial.begin(9600);
    delay(2000);

    SetLed(0, 0, 0);

    pinMode(LED_R, OUTPUT);             // Set `LED_R` pin to `OUTPUT`
    pinMode(LED_G, OUTPUT);             // Set `LED_G` pin to `OUTPUT`
    pinMode(LED_B, OUTPUT);             // Set `LED_B` pin to `OUTPUT`
    pinMode(MOTION_SENSOR, INPUT);      // Set `MOTION_SENSOR` pin to `INPUT`

}

// This function repeats itself after the `setup()` has finished running
void loop()
{
    DetectMovement();

    switch (CurrentState)
    {
        case UNARMED:
            Unarmed();
            break;
        case ARMED:
            Armed();
            break;
        case ALARMED:
            Alarmed();
            break;
    }

}

// This function will be called in the `UNARMED` state
void Unarmed()
{
   SetLed(0, 0, 0);

}


void Armed() {
  if (IsMovementDetected) {
      unsigned long currentMillis = millis();  // FRISSÍTÉS IDE!
      if (currentMillis - previousMillis >= colorChangeInterval) {
            previousMillis = currentMillis;
            currentColor = (currentColor + 1) % 3; // váltás piros-zöld-kék között
      }

      switch(currentColor) {
            case 0: SetLed(255, 0, 0); break;   // piros
            case 1: SetLed(0, 255, 0); break;   // zöld
            case 2: SetLed(0, 0, 255); break;   // kék
      }
  } else {
      SetLed(0, 0, 0); // nincs mozgás: LED ki
  }
}


// This function will be called in the `ALARMED` state
void Alarmed()
{
    // Turn the light to red and start the buzzer
    SetLed(255, 0, 0);
}


// This function lets you set the LED's RGB value
// Usage: SetLed(255, 255, 255);
//        SetLed(0, 0, 0); -> To turn it off
void SetLed(int red, int green, int blue)
{
    // Setting the output values (inverted because of the schematic) and also calculate the brightness
    analogWrite(LED_R, 255 - (red * BRIGHTNESS));       // red
    analogWrite(LED_G, 255 - (green * BRIGHTNESS));     // green
    analogWrite(LED_B, 255 - (blue * BRIGHTNESS));      // blue

}

// This function checks the RIP sensor whether is there movement or not
// Usage: DetectMovement();
void DetectMovement()
{
    IsMovementDetected = digitalRead(MOTION_SENSOR) == 1;
}