#include <SPI.h>
#include <WiFi101.h>

// üõ†Ô∏è Hardveres be√°ll√≠t√°sok
const int POWER_LAMP = 2;
const int RELAY = 3;
const int LIGHT_SENSOR = A0;
const int SOIL_SENSOR = A1;
const int WATER_SENSOR = A2;

// üå°Ô∏è K√ºsz√∂b√©rt√©kek
const int RAIN_THRESHOLD = 100;
const int SOIL_THRESHOLD = 50;
const int LIGHT_THRESHOLD = 100;

// üåê WiFi hozz√°f√©r√©s
const char SSID[] = "SAJ√ÅT_WIFI_NEV";
const char PASS[] = "SAJ√ÅT_WIFI_JELSZ√ì";

// üìä Szenzor- √©s m√≥dv√°ltoz√≥k
int SoilValue = 0;
int RainValue = 0;
int LightValue = 0;
String PumpMode = "auto";
String LampMode = "auto";

// üåê Webszerver
WiFiServer server(80);

// üü¢ Inicializ√°l√°s
void setup() {
  Serial.begin(9600);
  pinMode(RELAY, OUTPUT);
  pinMode(POWER_LAMP, OUTPUT);
  pinMode(LIGHT_SENSOR, INPUT);
  pinMode(SOIL_SENSOR, INPUT);
  pinMode(WATER_SENSOR, INPUT);

  WiFi.begin(SSID, PASS);
  unsigned long start = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - start < 20000) {
    delay(1000); Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED) {
    server.begin();
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("WiFi failed."); while (true);
  }
}

// üîÅ F≈ë ciklus
void loop() {
  SoilValue = analogRead(SOIL_SENSOR);
  RainValue = analogRead(WATER_SENSOR);
  LightValue = analogRead(LIGHT_SENSOR);

  WebServer();

  SetRelay(ShouldUsePump() ? "on" : "off");
  SetLamp(ShouldUseLamp() ? "on" : "off");
}

// üß† D√∂nt√©s logika
bool ShouldUsePump() {
  if (PumpMode == "on") return true;
  if (PumpMode == "off") return false;
  return SoilValue < SOIL_THRESHOLD && RainValue < RAIN_THRESHOLD;
}

bool ShouldUseLamp() {
  if (LampMode == "on") return true;
  if (LampMode == "off") return false;
  return LightValue < LIGHT_THRESHOLD;
}

// ‚öôÔ∏è V√©grehajt√°s
void SetRelay(String state) {
  digitalWrite(RELAY, state == "on" ? HIGH : LOW);
}

void SetLamp(String state) {
  digitalWrite(POWER_LAMP, state == "on" ? HIGH : LOW);
}

// üåê Webszerver v√°lasz
void WebServer() {
  WiFiClient client = server.available();
  if (client) {
    String currentLine = "", requestLine = "";
    bool requestCaptured = false;

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();

        if (c == '\n') {
          if (currentLine.length() == 0) {
            // üí° M√≥d v√°lt√°sok
            if (requestLine.indexOf("lamp-on") > 0) LampMode = "on";
            else if (requestLine.indexOf("lamp-off") > 0) LampMode = "off";
            else if (requestLine.indexOf("lamp-auto") > 0) LampMode = "auto";
            else if (requestLine.indexOf("pump-on") > 0) PumpMode = "on";
            else if (requestLine.indexOf("pump-off") > 0) PumpMode = "off";
            else if (requestLine.indexOf("pump-auto") > 0) PumpMode = "auto";

            // üìÑ Weblap v√°lasz
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: text/html");
            client.println();
            client.println("<html><body style='font-family:monospace;'>");
            client.println("<h2>Smart Control Panel</h2>");
            client.println("<p><b>Lamp:</b> <a href='/lamp-on'>ON</a> | <a href='/lamp-off'>OFF</a> | <a href='/lamp-auto'>AUTO</a></p>");
            client.println("<p><b>Pump:</b> <a href='/pump-on'>ON</a> | <a href='/pump-off'>OFF</a> | <a href='/pump-auto'>AUTO</a></p>");
            client.println("</body></html>");
            break;
          } else {
            if (!requestCaptured) {
              requestLine = currentLine;
              requestCaptured = true;
            }
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }

    delay(1);
    client.stop();
  }
}
